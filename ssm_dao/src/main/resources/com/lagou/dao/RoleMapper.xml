<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lagou.dao.RoleMapper">

    <!-- 查询角色列表（条件） -->
    <select id="findAllRole" parameterType="role" resultType="role">
        select * from roles
        <where>
            <if test="name != null and name != ''">
                and name = #{name}
            </if>
        </where>
    </select>

    <!-- 根据角色id查询关联的菜单id -->
    <select id="findMenuByRoleId" parameterType="int" resultType="int">
        SELECT
            m.id
        FROM
            roles r
            INNER JOIN role_menu_relation rm
                ON r.id = rm.role_id
            INNER JOIN menu m
                ON m.id = rm.menu_id
        WHERE r.id = #{roleId}
    </select>

    <!-- 根据角色id从中间表中删除角色关联的菜单信息 -->
    <delete id="deleteRoleContextMenu" parameterType="int">
        delete from role_menu_relation where role_id = #{roleId}
    </delete>

    <!-- 为角色分配菜单 -->
    <insert id="roleContextMenu" parameterType="role_menu_relation">
        insert into role_menu_relation values(null,#{menuId},#{roleId},#{createdTime},#{updatedTime},#{createdBy},#{updatedBy})
    </insert>

    <!-- 添加角色 -->
    <insert id="saveRole" parameterType="role">
        insert into roles values (null,#{code},#{name},#{description},
        #{createdTime},#{updatedTime},#{createdBy},#{updatedBy})
    </insert>
    
    <!-- 修改角色 -->
    <update id="updateRole" parameterType="role">
        update roles 
        <trim prefix="set" suffixOverrides=",">
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="code != null and code != ''">
                code = #{code},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="updatedTime != null">
                updated_time = #{updatedTime},
            </if>
        </trim>
        <where>
            <if test="id != null and id != ''">
                id = #{id}
            </if>
        </where>
    </update>

    <!-- 删除角色 -->
    <delete id="deleteRole" parameterType="int">
        delete from roles where id = #{id}
    </delete>

    <!--<resultMap id="roleResourceCategoryResultMap" type="resourceCategory">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="sort" column="sort"/>
        <result property="createdTime" column="created_time"/>
        <result property="updatedTime" column="updated_time"/>
        <result property="createdBy" column="created_by"/>
        <result property="updatedBy" column="updated_by"/>
        <collection property="resourceList" select="" column="" ofType="resource">

        </collection>
    </resultMap>-->

    <!-- 根据角色id查询关联的资源分类信息 -->
    <select id="findResourceCategoryByRoleId" parameterType="int" resultType="resourceCategory">
        SELECT DISTINCT
            rc.*
        FROM
            resource r
            INNER JOIN role_resource_relation rr
                ON r.id = rr.resource_id
            INNER JOIN resource_category rc
                ON r.category_id = rc.id
        WHERE rr.role_id = #{roleId}
        ORDER BY rc.sort
    </select>

    <!-- 根据角色id查询关联的资源信息 -->
    <select id="findResourceByRoleId" parameterType="int" resultType="resource">
        SELECT
            r.*
        FROM
            resource r
            INNER JOIN role_resource_relation rr
                ON r.id = rr.resource_id
        WHERE rr.role_id = #{roleId}
    </select>

    <!-- 根据角色id从中间表中删除角色关联的资源信息 -->
    <delete id="deleteRoleContextResource" parameterType="int">
        delete from role_resource_relation where role_id = #{roleId}
    </delete>

    <!-- 为角色分配资源 -->
    <insert id="roleContextResource" parameterType="roleResourceRelation">
        insert into role_resource_relation values (null,#{resourceId},#{roleId},
        #{createdTime},#{updatedTime},#{createdBy},#{updatedBy})
    </insert>

</mapper>